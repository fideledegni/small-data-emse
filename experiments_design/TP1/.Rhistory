for (i in 1:nb) {
LHSO_temp <- generateLHC(npts, dim)
critere_temp <- evalMinDist(LHSO_temp)$minDist
if (critere_temp < critere) {
LHSO <- LHSO_temp
critere <- critere_temp
}
}
evalMinDist(LHSO)$minDist
nb <- 30
npts <- 30
dim <- 2
LHSO <- generateLHC(npts, dim)
critere <- evalMinDist(LHSO)$minDist
for (i in 1:nb) {
LHSO_temp <- generateLHC(npts, dim)
critere_temp <- evalMinDist(LHSO_temp)$minDist
if (critere_temp < critere) {
LHSO <- LHSO_temp
critere <- critere_temp
}
}
evalMinDist(LHSO)$minDist
nb <- 30
npts <- 30
dim <- 2
LHSO <- generateLHC(npts, dim)
critere <- evalMinDist(LHSO)$minDist
for (i in 1:nb) {
LHSO_temp <- generateLHC(npts, dim)
critere_temp <- evalMinDist(LHSO_temp)$minDist
if (critere_temp < critere) {
LHSO <- LHSO_temp
critere <- critere_temp
}
}
evalMinDist(LHSO)$minDist
nb <- 30
npts <- 30
dim <- 2
LHSO <- generateLHC(npts, dim)
critere <- evalMinDist(LHSO)$minDist
for (i in 1:nb) {
LHSO_temp <- generateLHC(npts, dim)
critere_temp <- evalMinDist(LHSO_temp)$minDist
if (critere_temp < critere) {
LHSO <- LHSO_temp
critere <- critere_temp
}
}
evalMinDist(LHSO)$minDist
npts <- 30
dim <- 2
X <- generateLHC(npts, dim)
(X)
plot(X)
X <- generateLHC(npts, dim)
(X)
plot(X)
X <- generateLHC(npts, dim)
(X)
plot(X)
#1.4 Hypercubes latins
# Recherche aleatoire
nb <- 30
npts <- 30
dim <- 5
LHSO <- generateLHC(npts, dim)
critere <- evalMinDist(LHSO)$minDist
for (i in 1:nb) {
LHSO_temp <- generateLHC(npts, dim)
critere_temp <- evalMinDist(LHSO_temp)$minDist
if (critere_temp < critere) {
LHSO <- LHSO_temp
critere <- critere_temp
}
}
evalMinDist(LHSO)$minDist
#1.4 Hypercubes latins
# Recherche aleatoire
nb <- 30
npts <- 30
dim <- 5
LHSO <- generateLHC(npts, dim)
critere <- evalMinDist(LHSO)$minDist
for (i in 1:nb) {
LHSO_temp <- generateLHC(npts, dim)
critere_temp <- evalMinDist(LHSO_temp)$minDist
if (critere_temp < critere) {
LHSO <- LHSO_temp
critere <- critere_temp
}
}
evalMinDist(LHSO)$minDist
#1.4 Hypercubes latins
# Recherche aleatoire
nb <- 30
npts <- 30
dim <- 5
LHSO <- generateLHC(npts, dim)
critere <- evalMinDist(LHSO)$minDist
for (i in 1:nb) {
LHSO_temp <- generateLHC(npts, dim)
critere_temp <- evalMinDist(LHSO_temp)$minDist
if (critere_temp < critere) {
LHSO <- LHSO_temp
critere <- critere_temp
}
}
evalMinDist(LHSO)$minDist
#1.4 Hypercubes latins
# Recherche aleatoire
nb <- 30
npts <- 30
dim <- 5
LHSO <- generateLHC(npts, dim)
critere <- evalMinDist(LHSO)$minDist
for (i in 1:nb) {
LHSO_temp <- generateLHC(npts, dim)
critere_temp <- evalMinDist(LHSO_temp)$minDist
if (critere_temp < critere) {
LHSO <- LHSO_temp
critere <- critere_temp
}
}
evalMinDist(LHSO)$minDist
#1.4 Hypercubes latins
# Recherche aleatoire
nb <- 30
npts <- 30
dim <- 5
LHSO <- generateLHC(npts, dim)
critere <- evalMinDist(LHSO)$minDist
for (i in 1:nb) {
LHSO_temp <- generateLHC(npts, dim)
critere_temp <- evalMinDist(LHSO_temp)$minDist
if (critere_temp < critere) {
LHSO <- LHSO_temp
critere <- critere_temp
}
}
evalMinDist(LHSO)$minDist
#1.4 Hypercubes latins
# Recherche aleatoire
generateLHSO <- function(npts, dim, nbtest) {
LHSO <- generateLHS(npts, dim)
critere <- evalMinDist(LHSO)$minDist
for (i in 1:nbtest) {
LHSO_temp <- generateLHS(npts, dim)
critere_temp <- evalMinDist(LHSO_temp)$minDist
if (critere_temp < critere) {
LHSO <- LHSO_temp
critere <- critere_temp
}
}
return(LHSO)
}
nbtest <- 30
npts <- 30
dim <- 5
X <- generateLHSO(npts, dim, nbtest)
rm(list=ls()) # to clear the environment
#setwd('~/Dropbox/ICM-EMSE/0_3A/Data_Science/4_Small_Data/experiments_design/TP1')
setwd('C:/Users/Fidèle DEGNI/Dropbox/ICM-EMSE/0_3A/Data_Science/4_Small_Data/experiments_design/TP1')
#1. Construction de plans
#1.1 Tessellation centroids de Voronoi
# Algorithme de MacQueen
generateCTV <- function(npts, dim, nite) {
X <- matrix(data = runif(npts*dim), nrow = npts, ncol = dim)
j <- rep(1, npts)
for (i in 1:nite) {
w <- runif(dim)
norme <- rep(0, npts)
for (k in 1:npts) {
norme[k] <- norm(t(X[k,]-w))
}
min_ind <- which.min(norme)
X[min_ind,] <- (j[min_ind]*X[min_ind,] + w)/(j[min_ind]+1)
j[min_ind] <- j[min_ind] +1
}
return(X)
}
# Test
npts <- 10
dim <- 2
nite <- 100
X <- generateCTV(npts, dim, nite)
(X)
plot(X)
#1.2 Hypercubes latins
generateLHS <- function(npts, dim) {
X <- matrix(nrow = npts, ncol = dim)
for (i in 1:dim) {
X[, i] <- sample.int(npts) - 1
}
#Normalisation pour avoir les coordonnees entre 0 et 1
X <- X/(npts-1)
return(X)
}
npts <- 30
dim <- 2
X <- generateLHS(npts, dim)
(X)
plot(X)
#1.3 Criteres
evalMinDist <- function(X) {
D <- diag(NA, nrow(X))
for (i in 1:(nrow(X)-1)) {
for (j in (i+1):nrow(X)) {
norme = norm(t(X[i,]-X[j,]))
D[i, j] <- norme
D[j, i] <- norme
}
}
d <- min(D, na.rm = TRUE)
diag(D) <- 0
return( list(minDist = d, allDist = D) )
}
evalMinDist(X)
#1.4 Hypercubes latins
# Recherche aleatoire
generateLHSO <- function(npts, dim, nbtest) {
LHSO <- generateLHS(npts, dim)
critere <- evalMinDist(LHSO)$minDist
for (i in 1:nbtest) {
LHSO_temp <- generateLHS(npts, dim)
critere_temp <- evalMinDist(LHSO_temp)$minDist
if (critere_temp < critere) {
LHSO <- LHSO_temp
critere <- critere_temp
}
}
return(LHSO)
}
nbtest <- 30
npts <- 30
dim <- 5
X <- generateLHSO(npts, dim, nbtest)
evalMinDist(LHSO)$minDist
#1.4 Hypercubes latins
# Recherche aleatoire
generateLHSO <- function(npts, dim, nbtest) {
LHSO <- generateLHS(npts, dim)
critere <- evalMinDist(LHSO)$minDist
for (i in 1:nbtest) {
LHSO_temp <- generateLHS(npts, dim)
critere_temp <- evalMinDist(LHSO_temp)$minDist
if (critere_temp < critere) {
LHSO <- LHSO_temp
critere <- critere_temp
}
}
return(LHSO)
}
nbtest <- 30
npts <- 30
dim <- 5
X <- generateLHSO(npts, dim, nbtest)
evalMinDist(LHSO)$minDist
dim <- 5
X <- generateLHSO(npts, dim, nbtest)
evalMinDist(X)$minDist
dim <- 5
X <- generateLHSO(npts, dim, nbtest)
evalMinDist(X)$minDist
X <- generateLHSO(npts, dim, nbtest)
evalMinDist(X)$minDist
X <- generateLHSO(npts, dim, nbtest)
evalMinDist(X)$minDist
#2. Analyse
nite <- 100
CVT_2_10 <- generateCTV(10, 2, nite)
CVT_5_70 <- generateCTV(70, 5, nite)
CVT_10_150 <- generateCTV(150, 10, nite)
LHS_2_10 <- generateLHS(10, 2)
LHS_5_70 <- generateLHS(70, 5)
LHS_10_150 <- generateLHS(150, 10)
nbtest <- 30
LHSO_2_10 <- generateLHS(10, 2, nbtest)
LHSO_2_10 <- generateLHSO(10, 2, nbtest)
LHSO_5_70 <- generateLHSO(5, 70, nbtest)
LHSO_10_150 <- generateLHSO(150, 10, nbtest)
source("discrepancy.R")
op <-par(mfrow = c(3,1))
hist(CVT_2_10[,1])
hist(LHS_2_10[,1])
hist(LHSO_2_10[,1])
par(op)
op <-par(mfrow = c(3,1))
hist(CVT_10_150[,1])
hist(LHS_10_150[,1])
hist(LHSO_10_150[,1])
par(op)
# Repartition sur les marginales de dim 1
op <-par(mfrow = c(3,1))
hist(CVT_2_10[,1])
hist(LHS_2_10[,1])
hist(LHSO_2_10[,1])
par(op)
# Repartition sur les marginales de dim 2
op <-par(mfrow = c(3,1))
pairs(CVT_2_10)
pairs(LHS_2_10)
pairs(LHSO_2_10)
par(op)
# Repartition sur les marginales de dim 2
pairs(CVT_5_70)
pairs(LHS_5_70)
pairs(LHSO_5_70)
# Repartition sur les marginales de dim 2
pairs(CVT_5_70)
pairs(LHS_5_70)
pairs(LHSO_5_70)
# Repartition sur les marginales de dim 2
pairs(CVT_5_70)
pairs(LHS_5_70)
pairs(LHSO_5_70)
# Repartition sur les marginales de dim 1
for (i in 1:5) {
op <-par(mfrow = c(3,1))
hist(CVT_5_70[,i])
hist(LHS_5_70[,i])
hist(LHSO_5_70[,i])
par(op)
}
# Repartition sur les marginales de dim 2
pairs(CVT_5_70)
pairs(LHS_5_70)
pairs(LHSO_5_70)
pairs(LHSO_5_70)
pairs(LHSO_5_70)
pairs(LHSO_5_70)
# Repartition sur les marginales de dim 2
pairs(CVT_5_70)
pairs(LHS_5_70)
pairs(LHSO_5_70)
LHSO_5_70 <- generateLHSO(5, 70, nbtest)
pairs(LHSO_5_70)
pairs(LHSO_5_70)
pairs(LHSO_5_70)
pairs(LHSO_5_70)
pairs(LHSO_5_70)
CVT_5_70$allDist
evalMinDist(CVT_5_70)$allDist
evalMinDist(LHS_5_70)$allDist
evalMinDist(LHSO_5_70)$allDist
evalMinDist(LHSO_5_70)$allDist
rm(list=ls()) # to clear the environment
#setwd('~/Dropbox/ICM-EMSE/0_3A/Data_Science/4_Small_Data/experiments_design/TP1')
setwd('C:/Users/Fidèle DEGNI/Dropbox/ICM-EMSE/0_3A/Data_Science/4_Small_Data/experiments_design/TP1')
#1. Construction de plans
#1.1 Tessellation centroids de Voronoi
# Algorithme de MacQueen
generateCTV <- function(npts, dim, nite) {
X <- matrix(data = runif(npts*dim), nrow = npts, ncol = dim)
j <- rep(1, npts)
for (i in 1:nite) {
w <- runif(dim)
norme <- rep(0, npts)
for (k in 1:npts) {
norme[k] <- norm(t(X[k,]-w))
}
min_ind <- which.min(norme)
X[min_ind,] <- (j[min_ind]*X[min_ind,] + w)/(j[min_ind]+1)
j[min_ind] <- j[min_ind] +1
}
return(X)
}
# Test
npts <- 10
dim <- 2
nite <- 100
X <- generateCTV(npts, dim, nite)
(X)
plot(X)
#1.2 Hypercubes latins
generateLHS <- function(npts, dim) {
X <- matrix(nrow = npts, ncol = dim)
for (i in 1:dim) {
X[, i] <- sample.int(npts) - 1
}
#Normalisation pour avoir les coordonnees entre 0 et 1
X <- X/(npts-1)
return(X)
}
npts <- 30
dim <- 2
X <- generateLHS(npts, dim)
(X)
plot(X)
#1.3 Criteres
evalMinDist <- function(X) {
D <- diag(NA, nrow(X))
for (i in 1:(nrow(X)-1)) {
for (j in (i+1):nrow(X)) {
norme = norm(t(X[i,]-X[j,]))
D[i, j] <- norme
D[j, i] <- norme
}
}
d <- min(D, na.rm = TRUE)
diag(D) <- 0
return( list(minDist = d, allDist = D) )
}
evalMinDist(X)
#1.4 Hypercubes latins
# Recherche aleatoire
generateLHSOA <- function(npts, dim, nbtest) {
LHSO <- generateLHS(npts, dim)
critere <- evalMinDist(LHSO)$minDist
for (i in 1:nbtest) {
LHSO_temp <- generateLHS(npts, dim)
critere_temp <- evalMinDist(LHSO_temp)$minDist
if (critere_temp < critere) {
LHSO <- LHSO_temp
critere <- critere_temp
}
}
return(LHSO)
}
nbtest <- 30
npts <- 30
dim <- 5
X <- generateLHSOA(npts, dim, nbtest)
evalMinDist(X)$minDist
# Algorithme d'echange
generateLHSOE <- function(npts, dim, nbtest) {
LHSO <- generateLHS(npts, dim)
critere <- evalMinDist(LHSO)$minDist
for (i in 1:nbtest) {
#####################################
# Echange a faire
if (critere_temp < critere) {
LHSO <- LHSO_temp
critere <- critere_temp
}
}
return(LHSO)
}
nbtest <- 30
npts <- 30
dim <- 5
X <- generateLHSOE(npts, dim, nbtest)
evalMinDist(X)$minDist
#2. Analyse
nite <- 100
CVT_2_10 <- generateCTV(10, 2, nite)
CVT_5_70 <- generateCTV(70, 5, nite)
CVT_10_150 <- generateCTV(150, 10, nite)
LHS_2_10 <- generateLHS(10, 2)
LHS_5_70 <- generateLHS(70, 5)
LHS_10_150 <- generateLHS(150, 10)
nbtest <- 30
LHSO_2_10 <- generateLHSOA(10, 2, nbtest)
LHSO_5_70 <- generateLHSOA(5, 70, nbtest)
LHSO_10_150 <- generateLHSOA(150, 10, nbtest)
source("discrepancy.R")
# Repartition sur les marginales de dim 1
for (i in 1:5) {
op <-par(mfrow = c(3,1))
hist(CVT_5_70[,i])
hist(LHS_5_70[,i])
hist(LHSO_5_70[,i])
par(op)
}
# Repartition sur les marginales de dim 2
pairs(CVT_5_70)
pairs(LHS_5_70)
pairs(LHSO_5_70)
# Valeurs du critere maximin
evalMinDist(X)$minDist
evalMinDist(CVT_5_70)$minDist
evalMinDist(LHS_5_70)$minDist
evalMinDist(LHSO_5_70)$minDist
# Histogramme des interdistances
op <-par(mfrow = c(3,1))
evalMinDist(CVT_5_70)$allDist
evalMinDist(LHS_5_70)$allDist
evalMinDist(LHSO_5_70)$allDist
par(op)
evalMinDist(CVT_5_70)$allDist
evalMinDist(LHS_5_70)$allDist
evalMinDist(LHSO_5_70)$allDist
LHSO_10_150 <- generateLHSOA(150, 10, nbtest)
#2. Analyse
nite <- 100
CVT_2_10 <- generateCTV(10, 2, nite)
CVT_5_70 <- generateCTV(70, 5, nite)
CVT_10_150 <- generateCTV(150, 10, nite)
LHS_2_10 <- generateLHS(10, 2)
LHS_5_70 <- generateLHS(70, 5)
LHS_10_150 <- generateLHS(150, 10)
nbtest <- 30
LHSO_2_10 <- generateLHSOA(10, 2, nbtest)
LHSO_5_70 <- generateLHSOA(5, 70, nbtest)
LHSO_10_150 <- generateLHSOA(150, 10, nbtest)
evalMinDist(CVT_5_70)$allDist
evalMinDist(LHS_5_70)$allDist
evalMinDist(LHSO_5_70)$allDist
evalMinDist(LHS_5_70)$allDist
LHSO_5_70
LHS_5_70
LHSO_5_70 <- generateLHSOA(70, 5, nbtest)
evalMinDist(CVT_5_70)$allDist
evalMinDist(LHS_5_70)$allDist
evalMinDist(LHSO_5_70)$allDist
# Histogramme des interdistances
op <-par(mfrow = c(3,1))
hist(evalMinDist(CVT_5_70)$allDist)
hist(evalMinDist(LHS_5_70)$allDist)
hist(evalMinDist(LHSO_5_70)$allDist)
par(op)
