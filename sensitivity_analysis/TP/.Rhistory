# Morris
morris.product <- morris(model = f.product, factors = 3, r = 1000,
design = list(type = "oat", levels = 5, grid.jump = 3), binf = 0, bsup = 1)
plot(morris.product)
# Morris
morris.product <- morris(model = f.product, factors = 3, r = 1000,
design = list(type = "oat", levels = 5, grid.jump = 3), binf = -1, bsup = 1)
plot(morris.product)
# Offet des variables sur la réponse
Y.product <- f.product(cbind(X1, X2, X3))
mu0.p <- mean(Y.product)
# Splines pour lissage
ss1.p <- smooth.spline(X1, Y.product-mu0.p)
ss2.p <- smooth.spline(X2, Y.product-mu0.p)
ss3.p <- smooth.spline(X3, Y.product-mu0.p)
op <-par(mfrow = c(1,3))
plot(X1, Y.product-mu0.p)
lines(ss1.p, col = "blue", lwd = 3)
plot(X2, Y.product-mu0.p)
lines(ss2.p, col = "blue", lwd = 3)
plot(X3, Y.product-mu0.p)
lines(ss3.p, col = "blue", lwd = 3)
par(op)
n <- 100
X1 <- runif(n, min = 0, max = 1)
X2 <- runif(n, min = 0, max = 1)
X3 <- runif(n, min = 0, max = 1)
# Product function
f.product <- function(X) {
return( X[,1] * X[,2] * X[,3] )
}
# Morris
morris.product <- morris(model = f.product, factors = 3, r = 1000,
design = list(type = "oat", levels = 5, grid.jump = 3), binf = 0, bsup = 1)
plot(morris.product)
# Sobol indices
sobol.product <- fast99(model = f.product,  factors = 3, n = 1000, q = "qunif", q.arg = list(min = 0, max = 1))
plot(sobol.product)
# Offet des variables sur la réponse
Y.product <- f.product(cbind(X1, X2, X3))
mu0.p <- mean(Y.product)
# Splines pour lissage
ss1.p <- smooth.spline(X1, Y.product-mu0.p)
ss2.p <- smooth.spline(X2, Y.product-mu0.p)
ss3.p <- smooth.spline(X3, Y.product-mu0.p)
op <-par(mfrow = c(1,3))
plot(X1, Y.product-mu0.p)
lines(ss1.p, col = "blue", lwd = 3)
plot(X2, Y.product-mu0.p)
lines(ss2.p, col = "blue", lwd = 3)
plot(X3, Y.product-mu0.p)
lines(ss3.p, col = "blue", lwd = 3)
par(op)
# Morris
morris.product <- morris(model = f.product, factors = 3, r = 1000,
design = list(type = "oat", levels = 5, grid.jump = 3), binf = 0, bsup = 1)
plot(morris.product, xlim = c(0.20, 0.25))
# Morris
morris.product <- morris(model = f.product, factors = 3, r = 1000,
design = list(type = "oat", levels = 5, grid.jump = 3), binf = 0, bsup = 1)
plot(morris.product, xlim = c(0, 1))
# Morris
morris.product <- morris(model = f.product, factors = 3, r = 1000,
design = list(type = "oat", levels = 5, grid.jump = 3), binf = 0, bsup = 1)
plot(morris.product, xlim = c(0, 1), ylim = c(0, 1))
# Morris
morris.product <- morris(model = f.product, factors = 3, r = 1000,
design = list(type = "oat", levels = 5, grid.jump = 3), binf = 0, bsup = 1)
plot(morris.product, xlim = c(0, 1), ylim = c(0, 1))
# Morris
morris.product <- morris(model = f.product, factors = 3, r = 1000,
design = list(type = "oat", levels = 5, grid.jump = 3), binf = 0, bsup = 1)
plot(morris.product, xlim = c(0, 1), ylim = c(0, 1), main = "Morris")
# Sobol indices
sobol.product <- fast99(model = f.product,  factors = 3, n = 1000, q = "qunif", q.arg = list(min = 0, max = 1))
plot(sobol.product)
title(main = "Indices de Sobol")
# Offet des variables sur la réponse
Y.product <- f.product(cbind(X1, X2, X3))
mu0.p <- mean(Y.product)
# Splines pour lissage
ss1.p <- smooth.spline(X1, Y.product-mu0.p)
ss2.p <- smooth.spline(X2, Y.product-mu0.p)
ss3.p <- smooth.spline(X3, Y.product-mu0.p)
op <-par(mfrow = c(1,3))
plot(X1, Y.product-mu0.p)
lines(ss1.p, col = "blue", lwd = 3)
plot(X2, Y.product-mu0.p)
lines(ss2.p, col = "blue", lwd = 3)
plot(X3, Y.product-mu0.p)
lines(ss3.p, col = "blue", lwd = 3)
par(op)
title(main = "Effet des variables")
####### Cas test Volcan #######
#######  useful functions #############################
# Scale from [0 1] to [xmin xmax]
unnorm_var <- function(Xnorm){
if (is.null(dim(Xnorm))) Xnorm <- matrix(data = Xnorm, nrow=1) # numeric vector
nbrep <- nrow(Xnorm)
Xu <- matrix(rep(xmin,times=nbrep),byrow = T,ncol=nbvar) +
Xnorm * matrix(rep((xmax-xmin),times=nbrep),byrow = T,ncol=nbvar)
colnames(Xu) <- varnames
return(Xu)
}
# Scale from [xmin xmax] to [0 1]
norm_var <- function(X){
if (is.null(dim(X))) X <- matrix(data = X, nrow=1)
nbrep <- nrow(X)
Xu <- (X - matrix(rep(xmin,times=nbrep),byrow = T,ncol=nbvar)) /
matrix(rep((xmax-xmin),times=nbrep),byrow = T,ncol=nbvar)
colnames(Xu) <- varnames
return(Xu)
}
# normalize the output so that it is centered with a unit std dev
# because wls ranges from 0 to 10^9, do a scaling in log(1+wls)
# wls normalization
normalizeWLS <- function(awls){
lawls <- log(1+awls)
return((lawls - 8.54)/3.2)
}
# objective function
compute_wls <- function(x) {
if (is.null(dim(x))) {
x <- matrix(data = x, nrow=1)
}  else if (ncol(x)!=nbvar) {
x <- t(x)
}
xx <- unnorm_var(Xnorm=x)
y <- apply(xx, 1, wls_ulos)
return(normalizeWLS(y))
}
# Hypercubes latins
generateLHS <- function(npts, dim) {
X <- matrix(nrow = npts, ncol = dim)
for (i in 1:dim) {
X[, i] <- sample.int(npts) - 1
}
#Normalisation pour avoir les coordonnees entre 0 et 1
X <- X/(npts-1)
return(X)
}
# Plan d'expériences avec hypercubes latins
npts <- 50
dim <- 5
design.fact <- generateLHS(npts, dim)
response = compute_wls(design.fact)
####### Cas test Volcan #######
source("C:/Users/Fidèle DEGNI/Dropbox/ICM-EMSE/0_3A/Data_Science/4_Small_Data/test_case_volcano/VolcanoTestCase/mainScript_DatascienceClass.R")
rm(list=ls()) #  cleaning up
#setwd('~/Dropbox/ICM-EMSE/0_3A/Data_Science/4_Small_Data/sensitivity_analysis/TP')
setwd('C:/Users/Fidèle DEGNI/Dropbox/ICM-EMSE/0_3A/Data_Science/4_Small_Data/sensitivity_analysis/TP')
library(R.matlab)
source("./mogi_3D.R")
source("./wls_ulos.R")
source('kernels.R')
###### input for variables identification ###########
n2i <- list(xs=1, ys=2, zs=3, a=4, p=5) # name to index for variables
varnames <- c("xs","ys","zs","a","p")
nbvar <- 5
####### load utilities ##########################
rm(list=ls()) #  cleaning up
#setwd('~/Dropbox/ICM-EMSE/0_3A/Data_Science/4_Small_Data/sensitivity_analysis/TP')
setwd('C:/Users/Fidèle DEGNI/Dropbox/ICM-EMSE/0_3A/Data_Science/4_Small_Data/sensitivity_analysis/TP')
library(R.matlab)
source("./mogi_3D.R")
source("./wls_ulos.R")
source('kernels.R')
###### input for variables identification ###########
n2i <- list(xs=1, ys=2, zs=3, a=4, p=5) # name to index for variables
varnames <- c("xs","ys","zs","a","p")
nbvar <- 5
# optimum
xstar <- NA
xstar[n2i$xs] <- 367000 # X location of source in m UTM coordinates
xstar[n2i$ys] <- 7650300 # Y location of source in m UTM
xstar[n2i$zs] <- 0 # Elevation of source with respect to sea level in m
xstar[n2i$a] <- 500 # source radius in m
xstar[n2i$p] <- 20 # Source overpressure in MPa
# order of magnitude of the variables
# (different from 0, to be used when scaling, setting bounds...)
xmag <- NA
xmag[n2i$xs] <- 367000 # X location of source in UTM coordinates
xmag[n2i$ys] <- 7650300 # Y location of source in UTM
xmag[n2i$zs] <- 1000 # Elevation of source with respect to sea level
xmag[n2i$a] <- 500 # source radius
xmag[n2i$p] <- 100 # Source overpressure in MPa
# bounds on variables
xmax <- NA
xmin <- NA
xmin[n2i$xs]<-364000
xmax[n2i$xs]<-368000
xmin[n2i$ys]<-7649000
xmax[n2i$ys]<-7651000
xmin[n2i$zs]<- -3000
xmax[n2i$zs]<-1000
xmin[n2i$a]<- 50
xmax[n2i$a]<- 1000
xmin[n2i$p]<- -500
xmax[n2i$p]<-500
Glb_var <<- list(n2i=n2i,nbvar=nbvar,xmag=xmag,xmax=xmax,xmin=xmin) # always useful stuff
####### load data ###########
data <- readMat('data_nonoise.mat') # TODO: do a read from cvs version (rodo)
Glb_xi <<- as.matrix(data$locdata[,1])
Glb_yi <<- as.matrix(data$locdata[,2])
Glb_zi <<- as.matrix(data$locdata[,3])
Glb_ulos <<- as.matrix(data$locdata[,4])
# calculate data Covariance matrix, store it in a Global variable
# covariance from exponential kernel, var = 5e-4m2, cor_length = 850 m
# and invert it
Xdata <- data$locdata[,1:2] # z's are not accounted for in Xdata
Glb_CXinv <<- solve(kExp(Xdata,Xdata,c(5e-4,850,850))) # calculated once for all, used in wls_ulos
# # has been compared to the matlab covariance matrix below, max difference 1e-6
rm(data)
rm(Xdata)
#######  useful functions #############################
# Scale from [0 1] to [xmin xmax]
unnorm_var <- function(Xnorm){
if (is.null(dim(Xnorm))) Xnorm <- matrix(data = Xnorm, nrow=1) # numeric vector
nbrep <- nrow(Xnorm)
Xu <- matrix(rep(xmin,times=nbrep),byrow = T,ncol=nbvar) +
Xnorm * matrix(rep((xmax-xmin),times=nbrep),byrow = T,ncol=nbvar)
colnames(Xu) <- varnames
return(Xu)
}
# Scale from [xmin xmax] to [0 1]
norm_var <- function(X){
if (is.null(dim(X))) X <- matrix(data = X, nrow=1)
nbrep <- nrow(X)
Xu <- (X - matrix(rep(xmin,times=nbrep),byrow = T,ncol=nbvar)) /
matrix(rep((xmax-xmin),times=nbrep),byrow = T,ncol=nbvar)
colnames(Xu) <- varnames
return(Xu)
}
# normalize the output so that it is centered with a unit std dev
# because wls ranges from 0 to 10^9, do a scaling in log(1+wls)
# wls normalization
normalizeWLS <- function(awls){
lawls <- log(1+awls)
return((lawls - 8.54)/3.2)
}
# objective function
compute_wls <- function(x) {
if (is.null(dim(x))) {
x <- matrix(data = x, nrow=1)
}  else if (ncol(x)!=nbvar) {
x <- t(x)
}
xx <- unnorm_var(Xnorm=x)
y <- apply(xx, 1, wls_ulos)
return(normalizeWLS(y))
}
rm(list=ls()) #  cleaning up
#setwd('~/Dropbox/ICM-EMSE/0_3A/Data_Science/4_Small_Data/sensitivity_analysis/TP')
setwd('C:/Users/Fidèle DEGNI/Dropbox/ICM-EMSE/0_3A/Data_Science/4_Small_Data/sensitivity_analysis/TP')
library(R.matlab)
source("./mogi_3D.R")
source("./wls_ulos.R")
source('kernels.R')
###### input for variables identification ###########
n2i <- list(xs=1, ys=2, zs=3, a=4, p=5) # name to index for variables
varnames <- c("xs","ys","zs","a","p")
nbvar <- 5
# optimum
xstar <- NA
xstar[n2i$xs] <- 367000 # X location of source in m UTM coordinates
xstar[n2i$ys] <- 7650300 # Y location of source in m UTM
xstar[n2i$zs] <- 0 # Elevation of source with respect to sea level in m
xstar[n2i$a] <- 500 # source radius in m
xstar[n2i$p] <- 20 # Source overpressure in MPa
# order of magnitude of the variables
# (different from 0, to be used when scaling, setting bounds...)
xmag <- NA
xmag[n2i$xs] <- 367000 # X location of source in UTM coordinates
xmag[n2i$ys] <- 7650300 # Y location of source in UTM
xmag[n2i$zs] <- 1000 # Elevation of source with respect to sea level
xmag[n2i$a] <- 500 # source radius
xmag[n2i$p] <- 100 # Source overpressure in MPa
# bounds on variables
xmax <- NA
xmin <- NA
xmin[n2i$xs]<-364000
xmax[n2i$xs]<-368000
xmin[n2i$ys]<-7649000
xmax[n2i$ys]<-7651000
xmin[n2i$zs]<- -3000
xmax[n2i$zs]<-1000
xmin[n2i$a]<- 50
xmax[n2i$a]<- 1000
xmin[n2i$p]<- -500
xmax[n2i$p]<-500
Glb_var <<- list(n2i=n2i,nbvar=nbvar,xmag=xmag,xmax=xmax,xmin=xmin) # always useful stuff
data <- readMat('data_nonoise.mat') # TODO: do a read from cvs version (rodo)
data <- readMat('data_nonoise.mat') # TODO: do a read from cvs version (rodo)
Glb_xi <<- as.matrix(data$locdata[,1])
Glb_yi <<- as.matrix(data$locdata[,2])
Glb_zi <<- as.matrix(data$locdata[,3])
Glb_ulos <<- as.matrix(data$locdata[,4])
# calculate data Covariance matrix, store it in a Global variable
# covariance from exponential kernel, var = 5e-4m2, cor_length = 850 m
# and invert it
Xdata <- data$locdata[,1:2] # z's are not accounted for in Xdata
Glb_CXinv <<- solve(kExp(Xdata,Xdata,c(5e-4,850,850))) # calculated once for all, used in wls_ulos
# # has been compared to the matlab covariance matrix below, max difference 1e-6
rm(data)
rm(Xdata)
#######  useful functions #############################
# Scale from [0 1] to [xmin xmax]
unnorm_var <- function(Xnorm){
if (is.null(dim(Xnorm))) Xnorm <- matrix(data = Xnorm, nrow=1) # numeric vector
nbrep <- nrow(Xnorm)
Xu <- matrix(rep(xmin,times=nbrep),byrow = T,ncol=nbvar) +
Xnorm * matrix(rep((xmax-xmin),times=nbrep),byrow = T,ncol=nbvar)
colnames(Xu) <- varnames
return(Xu)
}
# Scale from [xmin xmax] to [0 1]
norm_var <- function(X){
if (is.null(dim(X))) X <- matrix(data = X, nrow=1)
nbrep <- nrow(X)
Xu <- (X - matrix(rep(xmin,times=nbrep),byrow = T,ncol=nbvar)) /
matrix(rep((xmax-xmin),times=nbrep),byrow = T,ncol=nbvar)
colnames(Xu) <- varnames
return(Xu)
}
# normalize the output so that it is centered with a unit std dev
# because wls ranges from 0 to 10^9, do a scaling in log(1+wls)
# wls normalization
normalizeWLS <- function(awls){
lawls <- log(1+awls)
return((lawls - 8.54)/3.2)
}
# objective function
compute_wls <- function(x) {
if (is.null(dim(x))) {
x <- matrix(data = x, nrow=1)
}  else if (ncol(x)!=nbvar) {
x <- t(x)
}
xx <- unnorm_var(Xnorm=x)
y <- apply(xx, 1, wls_ulos)
return(normalizeWLS(y))
}
# Hypercubes latins
generateLHS <- function(npts, dim) {
X <- matrix(nrow = npts, ncol = dim)
for (i in 1:dim) {
X[, i] <- sample.int(npts) - 1
}
#Normalisation pour avoir les coordonnees entre 0 et 1
X <- X/(npts-1)
return(X)
}
# Plan d'expériences avec hypercubes latins
npts <- 50
dim <- 5
design.fact <- generateLHS(npts, dim)
response = compute_wls(design.fact)
plot(response, ylab = "Observation", main = "Obsevation des valeurs calculées par compute_wls")
# Modèle de krigeage
fitted.model1 <- km(~1, design=design.fact, response=response,
covtype="matern5_2", control=list(pop.size=50,trace=FALSE), parinit=c(0.5, 0.5))
plot(fitted.model1)
# Plan d'expériences de test
n <- 10000
Xs <- runif(n = n)
Ys <- runif(n = n)
Zs <- runif(n = n)
AP <- expand.grid(seq(0, 1, length=100), seq(0, 1, length=100))
design.fact2 <- cbind(Xs, Ys, Zs, AP)
View(design.fact2)
names(design.fact) <- c("Xs", "Zs", "Ys", "A", "P")
View(design.fact2)
names(design.fact2) <- c("Xs", "Zs", "Ys", "A", "P")
View(design.fact2)
# Prediction function
kriging.mean <- function(Xnew, m) {
predict(m, Xnew, "UK", se.compute = FALSE, checkNames = FALSE)$mean
}
# Prediction function
kriging.mean <- function(Xnew, m) {
predict(m, Xnew, "UK", se.compute = FALSE, checkNames = FALSE)$mean
}
f.volcano <- function(X) {
kriging.mean(X, fitted.model1)
}
# Morris
morris.volcano <- morris(model = f.volcano, factors = 5, r = 1000,
design = list(type = "oat", levels = 5, grid.jump = 3), binf = 0, bsup = 1)
plot(morris.volcano, xlim = c(0, 1), ylim = c(0, 1), main = "Morris")
plot(morris.volcano), main = "Morris")
plot(morris.volcano, main = "Morris")
plot(morris.volcano, xlim = c(0, 3), ylim = c(0, 1), main = "Morris")
# Sobol indices
sobol.volcano <- fast99(model = f.volcano,  factors = 3, n = 1000, q = "qunif", q.arg = list(min = 0, max = 1))
# Sobol indices
sobol.volcano <- fast99(model = f.volcano,  factors = 5, n = 1000, q = "qunif", q.arg = list(min = 0, max = 1))
# Sobol indices
sobol.volcano <- fast99(model = f.volcano,  factors = 5, n = 1000, q = "qunif", q.arg = list(min = 0, max = 1))
plot(sobol.volcano)
title(main = "Indices de Sobol")
View(fitted.model1)
# Plan d'expériences de test pour faire des tracés
n <- 10000
Xs <- runif(n = n)
Ys <- runif(n = n)
Zs <- runif(n = n)
AP <- expand.grid(seq(0, 1, length=100), seq(0, 1, length=100))
design.fact2 <- cbind(Xs, Ys, Zs, AP)
names(design.fact2) <- c("Xs", "Zs", "Ys", "A", "P")
Y.volcano <- f.volcano(design.fact2)
mu0.v <- mean(Y.volcano)
# Splines pour lissage
ss1.v <- smooth.spline(Xs, Y.volcano-mu0.v)
ss2.v <- smooth.spline(Ys, Y.volcano-mu0.v)
ss3.v <- smooth.spline(Zs, Y.volcano-mu0.v)
ss3.v <- smooth.spline(AP[,1], Y.volcano-mu0.v)
ss5.v <- smooth.spline(AP[,2], Y.volcano-mu0.v)
op <-par(mfrow = c(1,5))
plot(Xs, Y.volcano-mu0.v)
lines(ss1.v, col = "blue", lwd = 3)
plot(Ys, Y.volcano-mu0.v)
lines(ss2.v, col = "blue", lwd = 3)
plot(Zs, Y.volcano-mu0.v)
lines(ss3.v, col = "blue", lwd = 3)
plot(AP[,1], Y.volcano-mu0.v)
lines(ss4.v, col = "blue", lwd = 3)
plot(AP[,1], Y.volcano-mu0.v)
lines(ss5.v, col = "blue", lwd = 3)
par(op)
title(main = "Effet des variables")
# Splines pour lissage
ss1.v <- smooth.spline(Xs, Y.volcano-mu0.v)
ss2.v <- smooth.spline(Ys, Y.volcano-mu0.v)
ss3.v <- smooth.spline(Zs, Y.volcano-mu0.v)
ss4.v <- smooth.spline(AP[,1], Y.volcano-mu0.v)
ss5.v <- smooth.spline(AP[,2], Y.volcano-mu0.v)
op <-par(mfrow = c(1,5))
plot(Xs, Y.volcano-mu0.v)
lines(ss1.v, col = "blue", lwd = 3)
plot(Ys, Y.volcano-mu0.v)
lines(ss2.v, col = "blue", lwd = 3)
plot(Zs, Y.volcano-mu0.v)
lines(ss3.v, col = "blue", lwd = 3)
plot(AP[,1], Y.volcano-mu0.v)
lines(ss4.v, col = "blue", lwd = 3)
plot(AP[,1], Y.volcano-mu0.v)
lines(ss5.v, col = "blue", lwd = 3)
par(op)
title(main = "Effet des variables")
Y.volcano <- f.volcano(design.fact2)
mu0.v <- mean(Y.volcano)
# Splines pour lissage
ss1.v <- smooth.spline(Xs, Y.volcano-mu0.v)
ss2.v <- smooth.spline(Ys, Y.volcano-mu0.v)
ss3.v <- smooth.spline(Zs, Y.volcano-mu0.v)
ss4.v <- smooth.spline(AP[,1], Y.volcano-mu0.v)
ss5.v <- smooth.spline(AP[,2], Y.volcano-mu0.v)
op <-par(mfrow = c(1,5))
plot(Xs, Y.volcano-mu0.v)
lines(ss1.v, col = "blue", lwd = 3)
plot(Ys, Y.volcano-mu0.v)
lines(ss2.v, col = "blue", lwd = 3)
plot(Zs, Y.volcano-mu0.v)
lines(ss3.v, col = "blue", lwd = 3)
plot(AP[,1], Y.volcano-mu0.v, xlab = "a (rayon)")
lines(ss4.v, col = "blue", lwd = 3)
plot(AP[,2], Y.volcano-mu0.v, xlab = "p (pression)")
lines(ss5.v, col = "blue", lwd = 3)
par(op)
title(main = "Effet des variables")
?image
print(fitted.model1)
ss1.v
ss1.v(1)
ss1.v$x
predict(ss1.v, PA[,1])$y
predict(ss1.v, AP[,1])$y
ss1.v$w
inter <- predict(fitted.model1, design.fact2, "UK", se.compute = FALSE, checkNames = FALSE)$mean -
predict(ss1.v, Xs)$y -
predict(ss2.v, Ys)$y -
predict(ss3.v, Zs)$y -
predict(ss4.v, AP[,1])$y -
predict(ss5.v, AP[,2])$y
inter
plot(inter)
plot(Xs, inter)
plot(AP[,1], inter)
plot(AP[,2], inter)
?image
image(AP[,1], AP[,2], inter)
sort(AP[,1])
image(sort(AP[,1]), sort(AP[,2]), inter)
image(sort(AP[,1]), sort(AP[,2]), inter)
plot(AP[,1], inter)
library(plot3D)
points3D(x = AP[,1], y = AP[,2], z = inter, col = "black",
colkey = FALSE, xlab="rayon", ylab="pression", zlab="interaction")
points3D(x = AP[,1], y = AP[,2], z = inter, col = "black",
xlab="rayon", ylab="pression", zlab="interaction")
image(seq(0, 1, length=100), seq(0, 1, length=100), inter)
image(seq(0, 1, length=100), seq(0, 1, length=100), matrix(inter, ncol = 100))
image(seq(0, 1, length=100), seq(0, 1, length=100), matrix(inter, ncol = 100),
xlab = "rayon", ylab = "pression", main = "Interaction")
contour(seq(0, 1, length=100), seq(0, 1, length=100), matrix(inter, ncol = 100),
xlab = "rayon", ylab = "pression", main = "Interaction")
contour(seq(0, 1, length=10), seq(0, 1, length=10), matrix(inter, ncol = 100),
xlab = "rayon", ylab = "pression", main = "Interaction")
contour(seq(0, 1, length=10), seq(0, 1, length=10), matrix(inter, ncol = 10),
xlab = "rayon", ylab = "pression", main = "Interaction")
image(seq(0, 1, length=100), seq(0, 1, length=100), matrix(inter, ncol = 100),
xlab = "rayon", ylab = "pression", main = "Interaction")
