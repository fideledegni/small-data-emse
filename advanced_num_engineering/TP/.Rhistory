source("mainScript_DatascienceClass.R")
library(DiceOptim)
library(sensitivity)
generateLHS <- function(npts, dim) {
X <- matrix(nrow = npts, ncol = dim)
for (i in 1:dim) {
X[, i] <- sample.int(npts) - 1
}
#Normalisation pour avoir les coordonnees entre 0 et 1
X <- X/(npts-1)
return(X)
}
# Plan d'expériences avec hypercubes latins
npts <- 50
dim <- 5
design.fact <- generateLHS(npts, dim)
generateLHS <- function(npts, dim) {
X <- matrix(nrow = npts, ncol = dim)
for (i in 1:dim) {
X[, i] <- sample.int(npts) - 1
}
#Normalisation pour avoir les coordonnees entre 0 et 1
X <- X/(npts-1)
return(X)
}
# Plan d'expériences avec hypercubes latins
npts <- 50
dim <- 5
design.fact <- generateLHS(npts, dim)
pairs(design.fact)
generateLHS <- function(npts, dim) {
X <- matrix(nrow = npts, ncol = dim)
for (i in 1:dim) {
X[, i] <- sample.int(npts) - 1
}
#Normalisation pour avoir les coordonnees entre 0 et 1
X <- X/(npts-1)
return(X)
}
# Plan d'expériences avec hypercubes latins
npts <- 100
dim <- 5
design.fact <- generateLHS(npts, dim)
pairs(design.fact, labels = c("x", "y", "z", "a", "p"))
title("Pairs polot")
generateLHS <- function(npts, dim) {
X <- matrix(nrow = npts, ncol = dim)
for (i in 1:dim) {
X[, i] <- sample.int(npts) - 1
}
#Normalisation pour avoir les coordonnees entre 0 et 1
X <- X/(npts-1)
return(X)
}
# Plan d'expériences avec hypercubes latins
npts <- 100
dim <- 5
design.fact <- generateLHS(npts, dim)
pairs(design.fact, labels = c(expression(x_s), "y_s", "z_s", "a", "p"))
title("Pairs polot")
generateLHS <- function(npts, dim) {
X <- matrix(nrow = npts, ncol = dim)
for (i in 1:dim) {
X[, i] <- sample.int(npts) - 1
}
#Normalisation pour avoir les coordonnees entre 0 et 1
X <- X/(npts-1)
return(X)
}
# Plan d'expériences avec hypercubes latins
npts <- 100
dim <- 5
design.fact <- generateLHS(npts, dim)
pairs(design.fact, labels = c(expression("x_s"), "y_s", "z_s", "a", "p"))
title("Pairs polot")
generateLHS <- function(npts, dim) {
X <- matrix(nrow = npts, ncol = dim)
for (i in 1:dim) {
X[, i] <- sample.int(npts) - 1
}
#Normalisation pour avoir les coordonnees entre 0 et 1
X <- X/(npts-1)
return(X)
}
# Plan d'expériences avec hypercubes latins
npts <- 100
dim <- 5
design.fact <- generateLHS(npts, dim)
pairs(design.fact, labels = c(expression("x^s"), "y_s", "z_s", "a", "p"))
title("Pairs polot")
generateLHS <- function(npts, dim) {
X <- matrix(nrow = npts, ncol = dim)
for (i in 1:dim) {
X[, i] <- sample.int(npts) - 1
}
#Normalisation pour avoir les coordonnees entre 0 et 1
X <- X/(npts-1)
return(X)
}
# Plan d'expériences avec hypercubes latins
npts <- 100
dim <- 5
design.fact <- generateLHS(npts, dim)
pairs(design.fact, labels = c(expression(x^s), "y_s", "z_s", "a", "p"))
title("Pairs polot")
?pairsD3
install.packages("pairsD3")
?pairsD3
library(pairsD3)
?pairsD3
rm(list=ls()) #  cleaning up
#setwd('~/Dropbox/ICM-EMSE/0_3A/Data_Science/4_Small_Data/advanced_num_engineering/TP')
setwd('C:/Users/Fidèle DEGNI/Dropbox/ICM-EMSE/0_3A/Data_Science/4_Small_Data/advanced_num_engineering/TP')
# reminer of detailed information available in the “volcan_test_case.pdf” file
source("mainScript_DatascienceClass.R")
library(DiceOptim)
library(sensitivity)
library(pairsD3)
generateLHS <- function(npts, dim) {
X <- matrix(nrow = npts, ncol = dim)
for (i in 1:dim) {
X[, i] <- sample.int(npts) - 1
}
#Normalisation pour avoir les coordonnees entre 0 et 1
X <- X/(npts-1)
return(X)
}
# Plan d'expériences avec hypercubes latins
npts <- 100
dim <- 5
design.fact <- generateLHS(npts, dim)
pairs(design.fact, labels = c(expression(x_s), expression(y_s), expression(z_s), expression(a), expression(p)))
title("Pairs polot")
pairsD3(design.fact, labels = c(expression(x_s), expression(y_s), expression(z_s), expression(a), expression(p)))
generateLHS <- function(npts, dim) {
X <- matrix(nrow = npts, ncol = dim)
for (i in 1:dim) {
X[, i] <- sample.int(npts) - 1
}
#Normalisation pour avoir les coordonnees entre 0 et 1
X <- X/(npts-1)
return(X)
}
# Plan d'expériences avec hypercubes latins
npts <- 100
dim <- 5
design.fact <- generateLHS(npts, dim)
pairs(design.fact, labels = c(expression(x_s), expression(y_s), expression(z_s), expression(a), expression(p)))
title("Pairs polot")
pairsD3(design.fact)
pairsD3(design.fact)
pairsD3(design.fact, labels = c(expression(x_s), expression(y_s), expression(z_s), expression(a), expression(p)))
pairsD3(design.fact, labels = c(expression(x_s), expression(y_s), expression(z_s), expression(a), expression(p)))
?pairsD3
?parcoord
parcoord(design.fact)
parcoord(design.fact, col = c(1, 2, 3, 4, 5))
parcoords(design.fact, col = c(1, 2, 3, 4, 5))
parcoord(design.fact, col = c(1, 2, 3, 4, 5))
parcoord(design.fact, col = c(1, 2, 3, 4, 5))
library(rgenoud)
response = compute_wls(design.fact)
plot(response, ylab = "Observation", main = "Obsevation des valeurs calculées par compute_wls")
response = compute_wls(design.fact)
plot(response, ylab = "Observation", main = "Obsevation des valeurs calculées par compute_wls")
abline(a = 0, b = -1.5)
plot(response, ylab = "Observation", main = "Obsevation des valeurs calculées par compute_wls")
abline(a = 0, b = -1.5)
abline(a = -1.5, b = -1.5)
abline(a = -1.5, b = 0)
abline(a = -1.5, b = 0, col = "red")
plot(response, ylab = "Observation", main = "Obsevation des valeurs calculées par compute_wls")
response = compute_wls(design.fact)
plot(response, ylab = "Observation", main = "Obsevation des valeurs calculées par compute_wls")
abline(a = -1.5, b = 0, col = "red")
# Modèle de krigeage
fitted.model1 <- km(~1, design=design.fact, response=response,
covtype="matern5_2", control=list(pop.size=50,trace=FALSE), parinit=c(0.5, 0.5))
plot(fitted.model1)
nsteps <- 25
lower <- rep(0,dim)
upper <- rep(1,dim)
oEGO <- EGO.nsteps(model=fitted.model1, fun=compute_wls, nsteps=nsteps,
lower=lower, upper=upper, control=list(pop.size=20, BFGSburnin=2))
response = compute_wls(design.fact)
plot(response, ylab = "Observation", main = "Obsevation des valeurs calculées par compute_wls")
abline(a = -1.5, b = 0, col = "red")
response = compute_wls(design.fact)
plot(response, ylab = "Observation", main = "Obsevation des valeurs calculées par compute_wls")
abline(a = -1.5, b = 0, col = "red")
optim_indexes <- which(response < -1.5)
print(optim_indexes)
response = compute_wls(design.fact)
plot(response, ylab = "Observation", main = "Obsevation des valeurs calculées par compute_wls")
abline(a = -1.5, b = 0, col = "red")
optim_indexes <- which(response < -1.5)
optim_values <- design.fact[optim_indexes, ]
View(optim_values)
response = compute_wls(design.fact)
plot(response, ylab = "Observation", main = "Obsevation des valeurs calculées par compute_wls")
abline(a = -1.5, b = 0, col = "red")
# Modèle de krigeage
fitted.model1 <- km(~1, design=design.fact, response=response,
covtype="matern5_2", control=list(pop.size=50,trace=FALSE), parinit=c(0.5, 0.5))
plot(fitted.model1)
library(DiceOptim)
# Modèle de krigeage
fitted.model1 <- km(~1, design=design.fact, response=response,
covtype="matern5_2", control=list(pop.size=50,trace=FALSE), parinit=c(0.5, 0.5))
#plot(fitted.model1)
nsteps <- 25
lower <- rep(0,dim)
upper <- rep(1,dim)
oEGO <- EGO.nsteps(model=fitted.model1, fun=compute_wls, nsteps=nsteps,
lower=lower, upper=upper, control=list(pop.size=20, BFGSburnin=2))
print(oEGO$par)
print(oEGO$value)
?EGO
?EGO.nsteps
optim_values
response(optim_indexes)
response[optim_indexes]
print(oEGO$par)
print(oEGO$value)
target_level <- which.min(oEGO$value)
target_level
target_level <- oEGO$value[which.min(oEGO$value)]
target_level
target_level_value <- oEGO$value[which.min(oEGO$value)]
target_level_coord <- oEGO$par[which.min(oEGO$value)]
target_level_coord
target_level_coord <- oEGO$par[which.min(oEGO$value),]
target_level_coord
library(KrigInv)
library(KrigInv)
?max_infill_criterion
optimcontrol <- list(method="genoud",pop.size=50)
obj <- max_infill_criterion(lower=lower,upper=upper,optimcontrol=optimcontrol,
method="bichon",T=target_level_value,model=fitted.model1)
View(obj)
View(obj)
obj$value
parcoord(design.fact, col = c(1, 2, 3, 4, 5))
?plotly
install.packages("plotly")
data.frame(cbind(design.fact, response)) %>% plot_ly(type = "parcoords",
dimensions = list(
list(range = c(.1, 1), labels = varnames[1], values = -xs),
list(range = c(.1, 1), labels = varnames[2], values = -ys),
list(range = c(.1, 1), labels = varnames[3], values = -zs),
list(range = c(.1, 1), labels = varnames[4], values = -a),
list(range = c(.1, 1), labels = varnames[5], values = -p),
list(range = range(response), labels = varnames[1], values = -xs)
))
plot_ly(data.frame(cbind(design.fact, response)), type = "parcoords",
dimensions = list(
list(range = c(.1, 1), labels = varnames[1], values = -xs),
list(range = c(.1, 1), labels = varnames[2], values = -ys),
list(range = c(.1, 1), labels = varnames[3], values = -zs),
list(range = c(.1, 1), labels = varnames[4], values = -a),
list(range = c(.1, 1), labels = varnames[5], values = -p),
list(range = range(response), labels = varnames[1], values = -xs)
))
library(plotly)
library(plotly)
plot_ly(data.frame(cbind(design.fact, response)), type = "parcoords",
dimensions = list(
list(range = c(.1, 1), labels = varnames[1], values = -xs),
list(range = c(.1, 1), labels = varnames[2], values = -ys),
list(range = c(.1, 1), labels = varnames[3], values = -zs),
list(range = c(.1, 1), labels = varnames[4], values = -a),
list(range = c(.1, 1), labels = varnames[5], values = -p),
list(range = range(response), labels = varnames[1], values = -xs)
))
data.frame(cbind(design.fact, response))
data.frame(cbind(design.fact, response)) %>% plot_ly(type = "parcoords",
dimensions = list(
list(range = c(.1, 1), labels = varnames[1], values = -xs),
list(range = c(.1, 1), labels = varnames[2], values = -ys),
list(range = c(.1, 1), labels = varnames[3], values = -zs),
list(range = c(.1, 1), labels = varnames[4], values = -a),
list(range = c(.1, 1), labels = varnames[5], values = -p),
list(range = range(response), labels = varnames[1], values = -xs)
))
?plot_ly
?plot_ly
data.frame(cbind(design.fact, response)) %>% plot_ly(type = "parcoords",
dimensions = list(
list(range = c(.1, 1), labels = varnames[1], values = -1),
list(range = c(.1, 1), labels = varnames[2], values = -1),
list(range = c(.1, 1), labels = varnames[3], values = -1),
list(range = c(.1, 1), labels = varnames[4], values = -1),
list(range = c(.1, 1), labels = varnames[5], values = -1),
list(range = range(response), labels = varnames[6], values = -1)
))
data.frame(cbind(design.fact, response)) %>% plot_ly(type = "parcoords",
dimensions = list(
list(range = c(.1, 1), labels = varnames[1], values = ~xs),
list(range = c(.1, 1), labels = varnames[2], values = ~ys),
list(range = c(.1, 1), labels = varnames[3], values = ~zs),
list(range = c(.1, 1), labels = varnames[4], values = ~a),
list(range = c(.1, 1), labels = varnames[5], values = ~p),
list(range = range(response), labels = varnames[6], values = ~xs)
))
data.frame(cbind(design.fact, response)) %>% plot_ly(type = "parcoords",
dimensions = list(
list(range = c(.1, 1), labels = varnames[1], values = ~V1),
list(range = c(.1, 1), labels = varnames[2], values = ~ys),
list(range = c(.1, 1), labels = varnames[3], values = ~zs),
list(range = c(.1, 1), labels = varnames[4], values = ~a),
list(range = c(.1, 1), labels = varnames[5], values = ~p),
list(range = range(response), labels = varnames[6], values = ~xs)
))
data.frame(cbind(design.fact, response)) %>% plot_ly(type = "parcoords",
dimensions = list(
list(range = c(.1, 1), labels = varnames[1], values = ~V1),
list(range = c(.1, 1), labels = varnames[2], values = ~V2),
list(range = c(.1, 1), labels = varnames[3], values = ~V3),
list(range = c(.1, 1), labels = varnames[4], values = ~V4),
list(range = c(.1, 1), labels = varnames[5], values = ~V5),
list(range = range(response), labels = varnames[6], values = ~xs)
))
data.frame(cbind(design.fact, response)) %>% plot_ly(type = "parcoords",
dimensions = list(
list(range = c(.1, 1), labels = varnames[1], values = ~V1),
list(range = c(.1, 1), labels = varnames[2], values = ~V2),
list(range = c(.1, 1), labels = varnames[3], values = ~V3),
list(range = c(.1, 1), labels = varnames[4], values = ~V4),
list(range = c(.1, 1), labels = varnames[5], values = ~V5),
list(range = range(response), labels = varnames[6], values = ~V6)
))
data.frame(cbind(design.fact, response)) %>% plot_ly(type = "parcoords",
dimensions = list(
list(range = c(.1, 1), labels = varnames[1], values = ~V1),
list(range = c(.1, 1), labels = varnames[2], values = ~V2),
list(range = c(.1, 1), labels = varnames[3], values = ~V3),
list(range = c(.1, 1), labels = varnames[4], values = ~V4),
list(range = c(.1, 1), labels = varnames[5], values = ~V5),
list(range = range(response), labels = varnames[6], values = ~response)
))
varnames <- c("xs", "ys", "zs", "a", "p")
data.frame(cbind(design.fact, response)) %>% plot_ly(type = "parcoords",
dimensions = list(
list(range = c(.1, 1), labels = varnames[1], values = ~V1),
list(range = c(.1, 1), labels = varnames[2], values = ~V2),
list(range = c(.1, 1), labels = varnames[3], values = ~V3),
list(range = c(.1, 1), labels = varnames[4], values = ~V4),
list(range = c(.1, 1), labels = varnames[5], values = ~V5),
list(range = range(response), labels = "response", values = ~response)
))
frame(cbind(design.fact, response))
data.frame(cbind(design.fact, response))
parcoord(design.fact, col = c(1, 2, 3, 4, 5))
library(plotly)
varnames <- c("xs", "ys", "zs", "a", "p")
data.frame(cbind(design.fact, response)) %>% plot_ly(type = "parcoords",
dimensions = list(
list(range = c(.1, 1), labels = varnames[1], values = ~V1),
list(range = c(.1, 1), labels = varnames[2], values = ~V2),
list(range = c(.1, 1), labels = varnames[3], values = ~V3),
list(range = c(.1, 1), labels = varnames[4], values = ~V4),
list(range = c(.1, 1), labels = varnames[5], values = ~V5),
list(range = range(response), labels = "response", values = ~response)
))
#parcoord(design.fact, col = c(1, 2, 3, 4, 5))
library(plotly)
varnames <- c("xs", "ys", "zs", "a", "p")
data.frame(cbind(design.fact, response)) %>% plot_ly(type = "parcoords",
dimensions = list(
list(range = c(.1, 1), labels = varnames[1], values = ~V1),
list(range = c(.1, 1), labels = varnames[2], values = ~V2),
list(range = c(.1, 1), labels = varnames[3], values = ~V3),
list(range = c(.1, 1), labels = varnames[4], values = ~V4),
list(range = c(.1, 1), labels = varnames[5], values = ~V5),
list(range = range(response), labels = "response", values = ~response)
))
data.frame(cbind(design.fact, response))
data.frame(cbind(design.fact, response))
data.frame(cbind(design.fact, response), dimnames = c(varnames, "response")) %>% plot_ly(type = "parcoords",
dimensions = list(
list(range = c(.1, 1), labels = varnames[1], values = ~xs),
list(range = c(.1, 1), labels = varnames[2], values = ~ys),
list(range = c(.1, 1), labels = varnames[3], values = ~zs),
list(range = c(.1, 1), labels = varnames[4], values = ~a),
list(range = c(.1, 1), labels = varnames[5], values = ~p),
list(range = range(response), labels = "response", values = ~response)
))
#parcoord(design.fact, col = c(1, 2, 3, 4, 5))
library(plotly)
varnames <- c("xs", "ys", "zs", "a", "p")
data.frame(cbind(design.fact, response), dimnames = c(varnames, "response")) %>% plot_ly(type = "parcoords",
dimensions = list(
list(range = c(.1, 1), labels = varnames[1], values = ~xs),
list(range = c(.1, 1), labels = varnames[2], values = ~ys),
list(range = c(.1, 1), labels = varnames[3], values = ~zs),
list(range = c(.1, 1), labels = varnames[4], values = ~a),
list(range = c(.1, 1), labels = varnames[5], values = ~p),
list(range = range(response), labels = "response", values = ~response)
))
data.frame(cbind(design.fact, response), dimnames = c(varnames, "response"))
data.frame(cbind(design.fact, response), dimnames = list(NULL, c(varnames, "response")))
data.frame(cbind(design.fact, response), colnames = c(varnames, "response"))
?data.frame
design.fact
generateLHS <- function(npts, dim) {
X <- matrix(nrow = npts, ncol = dim)
for (i in 1:dim) {
X[, i] <- sample.int(npts) - 1
}
#Normalisation pour avoir les coordonnees entre 0 et 1
X <- X/(npts-1)
return(X)
}
# Plan d'expériences avec hypercubes latins
npts <- 100
dim <- 5
design.fact <- generateLHS(npts, dim)
varnames <- c("xs", "ys", "zs", "a", "p")
names(design.fact) = varnames
design.fact
dimnames(design.fact) = list(NULL,varnames)
design.fact
design.fact.dimnames
design.fact[dimnames]
View(design.fact)
View(design.fact)
design.fact
rm(list=ls()) #  cleaning up
rm(list=ls()) #  cleaning up
#setwd('~/Dropbox/ICM-EMSE/0_3A/Data_Science/4_Small_Data/advanced_num_engineering/TP')
setwd('C:/Users/Fidèle DEGNI/Dropbox/ICM-EMSE/0_3A/Data_Science/4_Small_Data/advanced_num_engineering/TP')
# reminer of detailed information available in the “volcan_test_case.pdf” file
source("mainScript_DatascienceClass.R")
library(DiceOptim)
library(sensitivity)
library(pairsD3)
library(rgenoud)
library(KrigInv)
?dimnames
generateLHS <- function(npts, dim) {
X <- matrix(nrow = npts, ncol = dim)
for (i in 1:dim) {
X[, i] <- sample.int(npts) - 1
}
#Normalisation pour avoir les coordonnees entre 0 et 1
X <- X/(npts-1)
return(X)
}
# Plan d'expériences avec hypercubes latins
npts <- 100
dim <- 5
design.fact <- generateLHS(npts, dim)
varnames <- c("xs", "ys", "zs", "a", "p")
dimnames(design.fact) <- list(NULL,varnames)
design.fact
#parcoord(design.fact, col = c(1, 2, 3, 4, 5))
library(plotly)
data.frame(cbind(design.fact, response), colnames = c(varnames, "response")) %>% plot_ly(type = "parcoords",
dimensions = list(
list(range = c(.1, 1), labels = varnames[1], values = ~xs),
list(range = c(.1, 1), labels = varnames[2], values = ~ys),
list(range = c(.1, 1), labels = varnames[3], values = ~zs),
list(range = c(.1, 1), labels = varnames[4], values = ~a),
list(range = c(.1, 1), labels = varnames[5], values = ~p),
list(range = range(response), labels = "response", values = ~response)
))
generateLHS <- function(npts, dim) {
X <- matrix(nrow = npts, ncol = dim)
for (i in 1:dim) {
X[, i] <- sample.int(npts) - 1
}
#Normalisation pour avoir les coordonnees entre 0 et 1
X <- X/(npts-1)
return(X)
}
# Plan d'expériences avec hypercubes latins
npts <- 100
dim <- 5
design.fact <- generateLHS(npts, dim)
varnames <- c("xs", "ys", "zs", "a", "p")
dimnames(design.fact) <- list(NULL,varnames)
response = compute_wls(design.fact)
plot(response, ylab = "Observation", main = "Obsevation des valeurs calculées par compute_wls")
abline(a = -1.5, b = 0, col = "red")
optim_indexes <- which(response < -1.5)
optim_values <- design.fact[optim_indexes, ]
#parcoord(design.fact, col = c(1, 2, 3, 4, 5))
library(plotly)
data.frame(cbind(design.fact, response), colnames = c(varnames, "response")) %>% plot_ly(type = "parcoords",
dimensions = list(
list(range = c(.1, 1), labels = varnames[1], values = ~xs),
list(range = c(.1, 1), labels = varnames[2], values = ~ys),
list(range = c(.1, 1), labels = varnames[3], values = ~zs),
list(range = c(.1, 1), labels = varnames[4], values = ~a),
list(range = c(.1, 1), labels = varnames[5], values = ~p),
list(range = range(response), labels = "response", values = ~response)
))
data.frame(cbind(design.fact, response), colnames = c(varnames, "response"))
data.frame(cbind(design.fact, response)
)
#parcoord(design.fact, col = c(1, 2, 3, 4, 5))
library(plotly)
data.frame(cbind(design.fact, response)) %>% plot_ly(type = "parcoords",
dimensions = list(
list(range = c(.1, 1), labels = varnames[1], values = ~xs),
list(range = c(.1, 1), labels = varnames[2], values = ~ys),
list(range = c(.1, 1), labels = varnames[3], values = ~zs),
list(range = c(.1, 1), labels = varnames[4], values = ~a),
list(range = c(.1, 1), labels = varnames[5], values = ~p),
list(range = range(response), labels = "response", values = ~response)
))
?max_sur
